// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enumeraciones
enum EstadoPedido {
  PENDIENTE
  EN_PROCESO
  ENVIADO
  ENTREGADO
  CANCELADO
}

enum MetodoPago {
  TARJETA
  PAYPAL
  TRANSFERENCIA
  EFECTIVO
}

model Producto {
  id          Int              @id @default(autoincrement())
  nombre      String           @unique
  descripcion String
  precio      Float
  categoria   String
  stock       Int
  imagenUrl   String
  detalles    DetallesPedido[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([categoria])
}

model Cliente {
  id        Int      @id @default(autoincrement())
  nombre    String
  correo    String   @unique
  telefono  String
  direccion String
  pedidos   Pedido[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([correo])
}

model Pedido {
  id          Int              @id @default(autoincrement())
  fechaPedido DateTime         @default(now())
  estado      EstadoPedido     @default(PENDIENTE)
  total       Float
  metodoPago  MetodoPago
  clienteId   Int
  cliente     Cliente          @relation(fields: [clienteId], references: [id])
  detalles    DetallesPedido[]
  pago        Pago?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([clienteId])
  @@index([estado])
}

model DetallesPedido {
  id             Int      @id @default(autoincrement())
  pedidoId       Int
  pedido         Pedido   @relation(fields: [pedidoId], references: [id])
  productoId     Int
  producto       Producto @relation(fields: [productoId], references: [id])
  cantidad       Int
  precioUnitario Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([pedidoId])
  @@index([productoId])
}

model Pago {
  id         Int        @id @default(autoincrement())
  monto      Float
  fechaPago  DateTime   @default(now())
  metodoPago MetodoPago
  pedidoId   Int        @unique
  pedido     Pedido     @relation(fields: [pedidoId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([pedidoId])
}
