generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EstadoPedido {
  PENDIENTE
  EN_PROCESO
  ENVIADO
  ENTREGADO
  CANCELADO
}

enum MetodoPago {
  TARJETA
  PAYPAL
  TRANSFERENCIA
  EFECTIVO
}

enum RolUsuario {
  CLIENTE
  ADMIN
  SUPERADMIN
}

model Producto {
  id               Int               @id @default(autoincrement())
  nombre           String            @unique
  descripcion      String
  precio           Float
  categoria        String
  stock            Int
  imagenUrl        String
  detalles         DetallesPedido[]
  carritoProductos CarritoProducto[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([categoria])
}

model Cliente {
  id                 Int                 @id @default(autoincrement())
  nombre             String
  correo             String              @unique
  telefono           String
  direccion          String
  password           String
  rol                RolUsuario          @default(CLIENTE)
  estado             Boolean             @default(true) // Si el cliente está activo o deshabilitado
  carrito            Carrito?
  pedidos            Pedido[]
  sesiones           Sesion[]
  refreshTokens      RefreshToken[]
  tokenVerificacion  String?             @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  registrosActividad RegistroActividad[] @relation(name: "ClienteToRegistroActividad")

  @@index([correo])
}

model Pedido {
  id          Int              @id @default(autoincrement())
  fechaPedido DateTime         @default(now())
  estado      EstadoPedido     @default(PENDIENTE)
  total       Float
  metodoPago  MetodoPago
  clienteId   Int
  cliente     Cliente          @relation(fields: [clienteId], references: [id])
  detalles    DetallesPedido[]
  pago        Pago?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([clienteId])
  @@index([estado])
}

model DetallesPedido {
  id             Int      @id @default(autoincrement())
  pedidoId       Int
  pedido         Pedido   @relation(fields: [pedidoId], references: [id])
  productoId     Int
  producto       Producto @relation(fields: [productoId], references: [id])
  cantidad       Int
  precioUnitario Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([pedidoId])
  @@index([productoId])
}

model Pago {
  id         Int        @id @default(autoincrement())
  monto      Float
  fechaPago  DateTime   @default(now())
  metodoPago MetodoPago
  pedidoId   Int        @unique
  pedido     Pedido     @relation(fields: [pedidoId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([pedidoId])
}

// Modelo para manejar el carrito de compras
model Carrito {
  id        Int               @id @default(autoincrement())
  clienteId Int               @unique
  cliente   Cliente           @relation(fields: [clienteId], references: [id])
  productos CarritoProducto[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model CarritoProducto {
  id         Int      @id @default(autoincrement())
  carritoId  Int
  carrito    Carrito  @relation(fields: [carritoId], references: [id])
  productoId Int
  producto   Producto @relation(fields: [productoId], references: [id])
  cantidad   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([carritoId])
  @@index([productoId])
}

// Modelo para manejar las sesiones de autenticación
model Sesion {
  id        Int      @id @default(autoincrement())
  clienteId Int
  cliente   Cliente  @relation(fields: [clienteId], references: [id])
  token     String   @unique
  ip        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  clienteId Int
  cliente   Cliente  @relation(fields: [clienteId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clienteId])
}

model RegistroActividad {
  id         Int         @id @default(autoincrement())
  accion     String
  usuarioId  Int
  usuario    Cliente?    @relation(fields: [usuarioId], references: [id], name: "ClienteToRegistroActividad", map: "RegistroActividad_Cliente_fkey")
  superAdmin SuperAdmin? @relation(fields: [usuarioId], references: [id], name: "SuperAdminToRegistroActividad", map: "RegistroActividad_SuperAdmin_fkey")
  admin      Admin?      @relation(fields: [usuarioId], references: [id], name: "AdminToRegistroActividad", map: "RegistroActividad_Admin_fkey")
  createdAt  DateTime    @default(now())
  detalles   String
}

model Admin {
  id                 Int                 @id @default(autoincrement())
  nombre             String
  correo             String              @unique
  password           String
  rol                RolUsuario          @default(ADMIN) // Definimos el rol de admin aquí
  estado             Boolean             @default(true) // Si el admin está activo o deshabilitado
  otpSecret          String? // Secret para el código OTP
  tokenVerificacion  String?             @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  registrosActividad RegistroActividad[] @relation(name: "AdminToRegistroActividad")

  @@index([correo])
}

model SuperAdmin {
  id                 Int                 @id @default(autoincrement())
  nombre             String
  correo             String              @unique
  password           String
  rol                RolUsuario          @default(SUPERADMIN) // Definimos el rol de superadmin aquí
  otpSecret          String? // Secret para el código OTP
  tokenVerificacion  String?             @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  registrosActividad RegistroActividad[] @relation(name: "SuperAdminToRegistroActividad")

  @@index([correo])
}
